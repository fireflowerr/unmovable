plugins {
	id 'java'
}

repositories {
	mavenLocal()
	maven {
		url = 'https://repo.runelite.net'
		content {
			includeGroupByRegex("net\\.runelite.*")
		}
	}
	mavenCentral()
}

def runeLiteVersion = 'latest.release'
def lombokVersion = '1.18.30'
def junitVersion = '5.12.1'
def mockitoVersion = '5.16.0'

dependencies {
	compileOnly "net.runelite:client:$runeLiteVersion"

	compileOnly "org.projectlombok:lombok:$lombokVersion"
	annotationProcessor "org.projectlombok:lombok:$lombokVersion"

	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
	testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"

	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params
	testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"

	// https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
	testImplementation 'org.junit.platform:junit-platform-launcher:1.12.1'

	// https://mvnrepository.com/artifact/org.mockito/mockito-core
	testImplementation "org.mockito:mockito-core:$mockitoVersion"

	// https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
	testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"

	testImplementation "net.runelite:client:$runeLiteVersion"
	testImplementation "net.runelite:jshell:$runeLiteVersion"
}

group = 'net.fireflowerr'
version = '1.0.0'

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
	options.release.set(11)
}

tasks.register('shadowJar', Jar) {
	dependsOn configurations.testRuntimeClasspath
	manifest {
		attributes('Main-Class': 'net.fireflowerr.UnmovablePluginTestLauncher', 'Multi-Release': true)
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from sourceSets.main.output
	from sourceSets.test.output
	from {
		configurations.testRuntimeClasspath.collect { file ->
			file.isDirectory() ? file : zipTree(file)
		}
	}

	exclude 'META-INF/INDEX.LIST'
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
	exclude '**/module-info.class'

	group = BasePlugin.BUILD_GROUP
	archiveClassifier.set('shadow')
	archiveFileName.set("${rootProject.name}-${project.version}-all.jar")
}

tasks.register('launch', JavaExec) {
	classpath = files(tasks.shadowJar)
	jvmArgs = ['-ea']
}

test {
	useJUnitPlatform()
}
